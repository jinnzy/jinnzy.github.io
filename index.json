[{"categories":["docker"],"content":"构建多平台镜像的几种方法 ","date":"2021-01-07","objectID":"/docker-buildx/:0:0","tags":["buildx","docker"],"title":"使用buildx构建多平台镜像","uri":"/docker-buildx/"},{"categories":["docker"],"content":"QEMU仿真 使用qemu 仿真出很多平台，buildx集成了该特性，可以实现在其他平台构建不需要修改dockerfile ，当它需要对不同的架构运行一个二进制文件时，它会自己从binfmt_misc 处理器中已经注册的架构去加载对应的二进制文件。当然，我们需要手动在binfmt_misc处理器里去注册我们想要的架构的。 本篇文章主要介绍使用该方法来实现多平台镜像构建。 ","date":"2021-01-07","objectID":"/docker-buildx/:1:0","tags":["buildx","docker"],"title":"使用buildx构建多平台镜像","uri":"/docker-buildx/"},{"categories":["docker"],"content":"使用不同节点来构建 这种方式性能较好，但是并未选择这种方式，如果想深入了解，可以参考其他资料。 官方例子： $ docker buildx create --use --name mybuild node-amd64 mybuild $ docker buildx create --append --name mybuild node-arm64 $ docker buildx build --platform linux/amd64,linux/arm64 . ","date":"2021-01-07","objectID":"/docker-buildx/:2:0","tags":["buildx","docker"],"title":"使用buildx构建多平台镜像","uri":"/docker-buildx/"},{"categories":["docker"],"content":"交叉编译 如果开发语言对交叉编译支持较好，可以使用dockerfiles的多阶段构建，可以构建时传入BUILDPLATFORM 和TARGETPLATFORM 参数选择运行的平台及编译的平台。 FROM --platform=$BUILDPLATFORM golang:alpine AS build ARG TARGETPLATFORM ARG BUILDPLATFORM RUN echo \"I am running on $BUILDPLATFORM, building for $TARGETPLATFORM\" \u003e /log FROM alpine COPY --from=build /log /log 使用buildx构建 ","date":"2021-01-07","objectID":"/docker-buildx/:3:0","tags":["buildx","docker"],"title":"使用buildx构建多平台镜像","uri":"/docker-buildx/"},{"categories":["docker"],"content":"开启docker buildx 开启docker buildx插件，要求版本不低于19.03 第一种方法临时开启： $ export DOCKER_CLI_EXPERIMENTAL=enabled 第二种方法：在config.json 中开启\"experimental\": \"enabled\" $ vim ~/.docker/config.json { ... \"experimental\": \"enabled\" } 验证 $ docker buildx version github.com/docker/buildx v0.3.1-tp-docker 6db68d029599c6710a32aa7adcba8e5a344795a7 ","date":"2021-01-07","objectID":"/docker-buildx/:4:0","tags":["buildx","docker"],"title":"使用buildx构建多平台镜像","uri":"/docker-buildx/"},{"categories":["docker"],"content":"开启binfmt_misc 如果使用的是docker desktop默认是已经启用binfmt_misc的了 内核版本最好大于3.x，我这里用的是5.x的内核。 这里使用docker/binfmt 开启特权模式启用binfmt_misc docker run --privileged --rm docker/binfmt:a7996909642ee92942dcd6cff44b9b95f08dad64 检查是否开启成功 $ ls -l /proc/sys/fs/binfmt_misc/ total 0 -rw-r--r--. 1 root root 0 Jan 7 17:41 jexec -rw-r--r--. 1 root root 0 Jan 7 17:43 qemu-aarch64 -rw-r--r--. 1 root root 0 Jan 7 17:43 qemu-arm -rw-r--r--. 1 root root 0 Jan 7 17:43 qemu-ppc64le -rw-r--r--. 1 root root 0 Jan 7 17:43 qemu-riscv64 -rw-r--r--. 1 root root 0 Jan 7 17:43 qemu-s390x --w-------. 1 root root 0 Jan 7 17:41 register -rw-r--r--. 1 root root 0 Jan 7 17:41 status 检查是否启用处理器 $ grep -r \"enabled\" /proc/sys/fs/binfmt_misc/ /proc/sys/fs/binfmt_misc/qemu-riscv64:enabled /proc/sys/fs/binfmt_misc/qemu-s390x:enabled /proc/sys/fs/binfmt_misc/qemu-ppc64le:enabled /proc/sys/fs/binfmt_misc/qemu-arm:enabled /proc/sys/fs/binfmt_misc/qemu-aarch64:enabled /proc/sys/fs/binfmt_misc/jexec:enabled grep: /proc/sys/fs/binfmt_misc/register: Invalid argument /proc/sys/fs/binfmt_misc/status:enabled ","date":"2021-01-07","objectID":"/docker-buildx/:5:0","tags":["buildx","docker"],"title":"使用buildx构建多平台镜像","uri":"/docker-buildx/"},{"categories":["docker"],"content":"创建builder 需要创建一个新的docker builder，名称叫builder $ docker buildx create --name builder --use builder $ docker buildx ls NAME/NODE DRIVER/ENDPOINT STATUS PLATFORMS builder docker-container builder0 unix:///var/run/docker.sock inactive default * docker default default running linux/amd64, linux/386 这时可以看到一个默认builder和我们新建的一个builder，目前新建的builder还处于inactive的状态。 通过如下方式启动新的builder。 $ docker buildx inspect builder --bootstrap [+] Building 63.8s (1/1) FINISHED =\u003e [internal] booting buildkit 63.8s =\u003e =\u003e pulling image moby/buildkit:buildx-stable-1 61.9s =\u003e =\u003e creating container buildx_buildkit_builder0 1.9s Name: builder Driver: docker-container Nodes: Name: builder0 Endpoint: unix:///var/run/docker.sock Status: running Platforms: linux/amd64, linux/arm64, linux/riscv64, linux/ppc64le, linux/s390x, linux/386, linux/arm/v7, linux/arm/v6 ","date":"2021-01-07","objectID":"/docker-buildx/:6:0","tags":["buildx","docker"],"title":"使用buildx构建多平台镜像","uri":"/docker-buildx/"},{"categories":["docker"],"content":"构建多平台镜像 当前目录结构： $ tree ├── Dockerfile └── test.go Dockerfile: FROM golang:1.15-alpine AS builder WORKDIR /opt RUN go build -o test . FROM alpine WORKDIR /opt COPY --from=builder /opt/test . CMD [\"./test\"] test.go package main import ( \"fmt\" ) func main() { fmt.Println(\"test\") } 开始构建并上传，注意harbor 版本要在2.0 以上才支持。 $ docker buildx build -t reg.xxxxxx.cn/app/test-golang:v1 --platform=linux/arm64,linux/amd64 . [+] Building 5.2s (22/22) FINISHED =\u003e [internal] load build definition from Dockerfile 0.0s =\u003e =\u003e transferring dockerfile: 92B 0.0s =\u003e [internal] load .dockerignore 0.0s =\u003e =\u003e transferring context: 2B 0.0s =\u003e [linux/amd64 internal] load metadata for docker.io/library/alpine:latest 2.3s =\u003e [linux/amd64 internal] load metadata for docker.io/library/golang:1.15-alpine 2.0s =\u003e [linux/arm64 internal] load metadata for docker.io/library/alpine:latest 3.1s =\u003e [linux/arm64 internal] load metadata for docker.io/library/golang:1.15-alpine 2.1s =\u003e [linux/amd64 builder 1/4] FROM docker.io/library/golang:1.15-alpine@sha256:49b4eac11640066bc72c74b70202478b7d431c7d8918e0973d6e4aeb8b3129d2 0.0s =\u003e =\u003e resolve docker.io/library/golang:1.15-alpine@sha256:49b4eac11640066bc72c74b70202478b7d431c7d8918e0973d6e4aeb8b3129d2 0.0s =\u003e [linux/arm64 stage-1 1/3] FROM docker.io/library/alpine@sha256:3c7497bf0c7af93428242d6176e8f7905f2201d8fc5861f45be7a346b5f23436 0.1s =\u003e =\u003e resolve docker.io/library/alpine@sha256:3c7497bf0c7af93428242d6176e8f7905f2201d8fc5861f45be7a346b5f23436 1.8s =\u003e [linux/arm64 builder 1/4] FROM docker.io/library/golang:1.15-alpine@sha256:49b4eac11640066bc72c74b70202478b7d431c7d8918e0973d6e4aeb8b3129d2 0.1s =\u003e =\u003e resolve docker.io/library/golang:1.15-alpine@sha256:49b4eac11640066bc72c74b70202478b7d431c7d8918e0973d6e4aeb8b3129d2 0.0s =\u003e [linux/amd64 stage-1 1/3] FROM docker.io/library/alpine@sha256:3c7497bf0c7af93428242d6176e8f7905f2201d8fc5861f45be7a346b5f23436 0.1s =\u003e =\u003e resolve docker.io/library/alpine@sha256:3c7497bf0c7af93428242d6176e8f7905f2201d8fc5861f45be7a346b5f23436 0.0s =\u003e [internal] load build context 0.0s =\u003e =\u003e transferring context: 178B 0.0s =\u003e CACHED [linux/amd64 stage-1 2/3] WORKDIR /opt 0.0s =\u003e CACHED [linux/amd64 builder 2/4] WORKDIR /opt 0.0s =\u003e CACHED [linux/amd64 builder 3/4] ADD . /opt/ 0.0s =\u003e CACHED [linux/amd64 builder 4/4] RUN go build -o test . 0.0s =\u003e CACHED [linux/amd64 stage-1 3/3] COPY --from=builder /opt/test . 0.0s =\u003e CACHED [linux/arm64 stage-1 2/3] WORKDIR /opt 0.0s =\u003e CACHED [linux/arm64 builder 2/4] WORKDIR /opt 0.0s =\u003e CACHED [linux/arm64 builder 3/4] ADD . /opt/ 0.0s =\u003e CACHED [linux/arm64 builder 4/4] RUN go build -o test . 0.0s =\u003e CACHED [linux/arm64 stage-1 3/3] COPY --from=builder /opt/test . 0.0s =\u003e exporting to image 1.8s =\u003e =\u003e exporting layers 0.6s =\u003e =\u003e exporting manifest sha256:714e4f18895bb698c65392eda3b39e35b38df0e84c34ce1f604bfa8fdb466a77 0.0s =\u003e =\u003e exporting config sha256:0339ab69edd09e4038046c8c056305733f050918725b6f265780189c0bdd76e3 0.0s =\u003e =\u003e exporting manifest sha256:a5c4695278c99a1801c557e68145d7a1e61fa82288a9d2b43b1f85219dea5b8a 0.0s =\u003e =\u003e exporting config sha256:a69d7dfa854e466d743d09c3c95ebca68f2feb6cb335bc0aecc4a256cc95e68f 0.0s =\u003e =\u003e exporting manifest list sha256:77677ebebf2dda103c6cd8598018a1d9bb79e06102173588fef5c501e81f6cb3 0.0s =\u003e =\u003e pushing layers 0.5s =\u003e =\u003e pushing manifest for reg.xxxxxx.cn/app/test-golang:v1 遇到的错误 ","date":"2021-01-07","objectID":"/docker-buildx/:7:0","tags":["buildx","docker"],"title":"使用buildx构建多平台镜像","uri":"/docker-buildx/"},{"categories":["docker"],"content":"上传镜像时x509: certificate signed by unknown authority 完整报错： failed to solve: rpc error: code = Unknown desc = failed to do request: Head [https://reg.xxxxxx.cn/v2/app/test-golang/blobs/sha256:0c1f186a05c7a4d0cb23b4a339473c5e96115be11f4deb24f74d3f2324120c87:](https://reg.xxxxxx.cn/v2/app/test-golang/blobs/sha256:0c1f186a05c7a4d0cb23b4a339473c5e96115be11f4deb24f74d3f2324120c87:) x509: certificate signed by unknown authority 这是因为公司所用的harbor证书是自签名证书，暂时的解决方法是将harbor证书加到builder容器中。 $ BUILDER=$(docker ps | grep buildkitd | awk '{print $1}') $ docker cp ./harbor.crt $BUILDER:/usr/local/share/ca-certificates/ # harbor.crt为harbor ca证书 $ sudo docker exec $BUILDER update-ca-certificates $ sudo docker restart $BUILDER 重新上传镜像即可。 参考链接 https://docs.docker.com/buildx/working-with-buildx/ https://zhuanlan.zhihu.com/p/227048978 https://github.com/docker/buildx/issues/80 ","date":"2021-01-07","objectID":"/docker-buildx/:8:0","tags":["buildx","docker"],"title":"使用buildx构建多平台镜像","uri":"/docker-buildx/"},{"categories":["hugo"],"content":"hugo初体验 ","date":"2021-01-01","objectID":"/hugo-blog/:0:0","tags":["hugo"],"title":"使用hugo来搭建个人博客","uri":"/hugo-blog/"},{"categories":["hugo"],"content":"安装hugo 下载链接 我这里选择的最新版本v0.80.0，选择操作系统对应的版本即可，我这里是选的win10 64位的。 下载后将hugo.exe加入到环境变量中，我是习惯创建一个bin目录，将可执行文件都放到这里。 ps 下载的时候发现链接竟然打不开了，可以通过添加hosts解决 # github 199.232.96.133 avatars0.githubusercontent.com 199.232.96.133 avatars1.githubusercontent.com 199.232.96.133 avatars2.githubusercontent.com 199.232.96.133 avatars3.githubusercontent.com 199.232.96.133 avatars4.githubusercontent.com 199.232.96.133 avatars5.githubusercontent.com 199.232.96.133 avatars6.githubusercontent.com 199.232.96.133 avatars7.githubusercontent.com 199.232.96.133 avatars8.githubusercontent.com 199.232.96.133 user-images.githubusercontent.com ","date":"2021-01-01","objectID":"/hugo-blog/:1:0","tags":["hugo"],"title":"使用hugo来搭建个人博客","uri":"/hugo-blog/"},{"categories":["hugo"],"content":"创建一个hugo项目 $ hugo.exe new site jinnzy.github.io.source ","date":"2021-01-01","objectID":"/hugo-blog/:2:0","tags":["hugo"],"title":"使用hugo来搭建个人博客","uri":"/hugo-blog/"},{"categories":["hugo"],"content":"安装主题 这里有两种方法我采用的第一种方法，比较方便，有什么问题可以直接修改。 第一种：下载最新的压缩包或直接clone到themes目录 $ cd jinnzy.github.io.source $ git clone https://github.com/dillonzq/LoveIt.git themes/LoveIt 第二种：使用子模块来安装 $ cd jinnzy.github.io.source $ git init $ git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt ","date":"2021-01-01","objectID":"/hugo-blog/:3:0","tags":["hugo"],"title":"使用hugo来搭建个人博客","uri":"/hugo-blog/"},{"categories":["hugo"],"content":"修改配置 位置：./config.toml 可以参考官方文档中3.1的示例配置，由于太大这里就不贴出来了 在这个基础上我额外修改了以下几个配置，其余的就是一些网站标题描述等的就不多说了。 # 是否使用 git 信息 enableGitInfo = true [params] gitRepo = \"jinnzy.github.io.source\" [markup] # 目录设置 [markup.tableOfContents] # 从1个#开始算标题，默认是两个#开始算标题 startLevel = 1 endLevel = 6 ","date":"2021-01-01","objectID":"/hugo-blog/:4:0","tags":["hugo"],"title":"使用hugo来搭建个人博客","uri":"/hugo-blog/"},{"categories":["hugo"],"content":"修改文章默认的模板 位置：./archetypes/default.md ---title:\"{{ replace .Name \"-\" \"\" | title }}\"date:{{.Date }}draft:falsetoc:truetags:- \"\"categories:- \"\"--- 加入了目录标签和分类等。 ","date":"2021-01-01","objectID":"/hugo-blog/:5:0","tags":["hugo"],"title":"使用hugo来搭建个人博客","uri":"/hugo-blog/"},{"categories":["hugo"],"content":"创建第一篇文章 $ hugo new posts/hugo-blog-1.md 启动进行测试，会报错 $ hugo server -D ··· Error: Error building site: failed to render pages: render of \"page\" failed: execute of template failed: template: posts/single.html:92:124: executing \"content\" at \u003cpartial \"function/content.html\"\u003e: error calling partial: \"/Users/tc/Documents/workspace_2020/blog/themes/loveIt/layouts/partials/function/content.html:15:15\": execute of template failed: template: partials/function/content.html:15:15: executing \"partials/function/content.html\" at \u003cpartial \"function/checkbox.html\" $content\u003e: error calling partial: partial that returns a value needs a non-zero argument. -D不加也可以，因为前面已经设置 draft: false 了。 这里报错是一个bug，已经有人pr但是并未合并进来，所以要自己手动修改一下。 修改文件：themes/loveIt/layouts/partials/function/content.html 修改后如下 {{- $content := .Content -}} {{- if ne \"\" $content -}} {{- if .Ruby -}} {{- $content = partial \"function/ruby.html\" $content -}} {{- end -}} {{- if .Fraction -}} {{- $content = partial \"function/fraction.html\" $content -}} {{- end -}} {{- if .Fontawesome -}} {{- $content = partial \"function/fontawesome.html\" $content -}} {{- end -}} {{- $content = partial \"function/checkbox.html\" $content -}} {{- $content = partial \"function/escape.html\" $content -}} {{- end -}} {{- return $content -}} 随后再次启动，进入http://localhost:1313 就可以看到博客首页了。 利用github pages部署blog 前置条件：需要安装git ","date":"2021-01-01","objectID":"/hugo-blog/:6:0","tags":["hugo"],"title":"使用hugo来搭建个人博客","uri":"/hugo-blog/"},{"categories":["hugo"],"content":"创建github仓库 登录github创建库 我这里是创建了两个库 jinnzy.github.io.source 选择的是私有库(Private)存放hugo源文件，利用github actions来编译生成静态文件推送到jinnzy.github.io库中 jinnzy.github.io 选择的是公共库(Public)存放hugo编译后的静态页面，主要是通过github pages功能访问这些静态文件。 ","date":"2021-01-01","objectID":"/hugo-blog/:7:0","tags":["hugo"],"title":"使用hugo来搭建个人博客","uri":"/hugo-blog/"},{"categories":["hugo"],"content":"配置github ssh key 生成ssk key $ ssh-keygen Generating public/private rsa key pair. Enter file in which to save the key (/root/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /root/.ssh/id_rsa. Your public key has been saved in /root/.ssh/id_rsa.pub. The key fingerprint is: 53:0e:0b:0f:c0:b8:d3:4f:e1:8a:a8:5d:8c:8f:98:cf jinzhy@vlnx107005.firstshare.cn The key's randomart image is: +--[ RSA 2048]----+ | o. | | . ... | | o .o.. . | | o . o+ = | | . = + S . | |. o + . . | |.+ + | |+.o . | | .E | +-----------------+ /root/.ssh/id_rsa 私钥 /root/.ssh/id_rsa.pub 公钥 打开jinnzy.github.io.source 库添加Secrets ，名称为ACTIONS_DEPLOY_KEY，将/root/.ssh/id_rsa的内容复制进去 打开jinnzy.github.io 库添加Deploy keys ，名称随便都行，将/root/.ssh/id_rsa.pub的内容复制进去。 ","date":"2021-01-01","objectID":"/hugo-blog/:8:0","tags":["hugo"],"title":"使用hugo来搭建个人博客","uri":"/hugo-blog/"},{"categories":["hugo"],"content":"配置github actions 打开jinnzy.github.io.source，创建Actions 全部内容如下： name:Deploy Hugo Site to Github Pages on Main Branchon:push:branches:- mainjobs:build-deploy:runs-on:ubuntu-18.04steps:- uses:actions/checkout@v2- name:Setup Hugouses:peaceiris/actions-hugo@v2with:hugo-version:'0.80.0'extended:true# 使用扩展版- name:Buildrun:hugo --minify- name:Deployuses:peaceiris/actions-gh-pages@v3with:deploy_key:${{ secrets.ACTIONS_DEPLOY_KEY }}# 这里的 ACTIONS_DEPLOY_KEY 则是上面设置 Private Key的变量名external_repository:jinnzy/jinnzy.github.io# Pages 远程仓库 publish_dir:./publickeep_files:false# remove existing filespublish_branch:main # deploying branchcommit_message:${{ github.event.head_commit.message }} ","date":"2021-01-01","objectID":"/hugo-blog/:9:0","tags":["hugo"],"title":"使用hugo来搭建个人博客","uri":"/hugo-blog/"},{"categories":["hugo"],"content":"上传hugo项目传到github 当前所在目录：./jinzhy.github.io.source $ git init $ git commit -m \"first commit\" $ git branch -M main $ git remote add origin https://github.com/jinnzy/jinzhy.github.io.source.git $ git pull # 先把之前提交的的内容拉取下来 $ git push -u origin main 进入Actions 可以看到上传成功了 打开jinzhy.github.io 项目 下拉找到GitHub Pages 可以看到发布地址，这时访问https://jinnzy.github.io 就可以看到博客了。 Console报错找不到/site.webmanifest 引用自lewky.cn博客中的内容。 该文件和Progressive web applications (PWA)有关，通过添加PWA到Hugo站点，可以实现离线访问的功能，也就是说断网状态下依然可以访问到你之前访问过的网页，换言之就是通过PWA来将访问过的网页资源缓存到了本地，所以断网下仍然可以继续访问网站。当然，恢复网络时会自动更新最新的页面资源。 但是目前该功能还不够完善，可能存在着安全性的问题，并且实现过程也比较繁杂，最终还是决定把这个引用给去掉，做法如下： 把博客主题目录下的\\themes\\LoveIt\\layouts\\partials\\head\\link.html拷贝到根目录下的\\layouts\\partials\\head\\link.html 打开拷贝后的link.html，把\u003clink rel=\"manifest\" href=\"/site.webmanifest\"\u003e删掉或者注释掉： {{- /* \u003clink rel=\"manifest\" href=\"/site.webmanifest\"\u003e */ -}} 添加友链 注意：参考了Reference中的几篇文章添加友链，发现css样式总是不生效，查了一下午才在这个pr中发现loveit 主题某些功能需要把scss 转换为css 所以要选择扩展版下载，所以又重新下载了hugo_extended_0.80.0_Windows-64bit 这个版本😭。 主要使用kkkgo/hugo-friendlinks项目中的代码。 ","date":"2021-01-01","objectID":"/hugo-blog/:10:0","tags":["hugo"],"title":"使用hugo来搭建个人博客","uri":"/hugo-blog/"},{"categories":["hugo"],"content":"添加友链样式 位置：jinnzh.github.io.source/assets/css/_custom.scss // friendslink .myfriends { text-align: center; background-color: #fff; opacity: 0.9; } .myfriends a { color: black; } .myfriends p { display: none; } .friendurl { text-decoration: none !important; color: black; } .myfriend { width: 56px !important; height: 56px !important; border-radius: 50%; border: 1px solid #ddd; padding: 2px; box-shadow: 1px 1px 1px rgba(0,0,0, .15); margin-top: -12px !important; margin-left: 10px !important; background-color: #fff; } .frienddiv { position: relative; left: 0; right: 0; width: 100%; height: 70px; line-height: 1.38; margin-top: -5px; margin-bottom: -5px; border-radius: 5px; background: rgba(255, 255, 255, .2); box-shadow: 4px 4px 2px 1px rgba(0, 0, 255, .2); overflow: hidden; } .frienddiv:hover { background: rgba(87, 142, 224, 0.15); } .frienddiv:hover .frienddivleft img { transition: .9s!important; -webkit-transition: .9s!important; -moz-transition: .9s!important; -o-transition: .9s!important; -ms-transition: .9s!important; transform: rotate(360deg)!important; -webkit-transform: rotate(360deg)!important; -moz-transform: rotate(360deg)!important; -o-transform: rotate(360deg)!important; -ms-transform: rotate(360deg)!important; } .frienddivleft { width: 92px; float: left; } .frienddivleft { margin-top: 15px; margin-right: 2px; } .frienddivright { margin-top: 15px; text-overflow: ellipsis; overflow: hidden; white-space: nowrap; } ","date":"2021-01-01","objectID":"/hugo-blog/:11:0","tags":["hugo"],"title":"使用hugo来搭建个人博客","uri":"/hugo-blog/"},{"categories":["hugo"],"content":"创建shortcodes友链文件 位置：jinnzh.github.io.source/layouts/shortcodes/friend.html {{ if .IsNamedParams }} \u003cp\u003e\u003catarget=\"_blank\" href={{ .Get \"url\" }} title={{ .Get \"name\" }} class=\"friendurl\"\u003e \u003cdivclass=\"frienddiv\"\u003e \u003cdivclass=\"frienddivleft\"\u003e \u003cimgclass=\"myfriend\" src={{ .Get \"logo\" }} /\u003e \u003c/div\u003e \u003cdivclass=\"frienddivright\"\u003e {{ .Get \"name\" }}\u003cbr /\u003e{{ .Get \"word\" }} \u003c/div\u003e \u003c/div\u003e \u003c/a\u003e \u003c/p\u003e {{ end }} ","date":"2021-01-01","objectID":"/hugo-blog/:12:0","tags":["hugo"],"title":"使用hugo来搭建个人博客","uri":"/hugo-blog/"},{"categories":["hugo"],"content":"创建friend md文件 位置：jinnzh.github.io.source/content/friends.md --- hiddenFromSearch: true --- # 友链 {{\u003cfriendname=\"Dillon\" url=\"https://github.com/dillonzq/\" logo=\"https://avatars0.githubusercontent.com/u/30786232?s=460\u0026u=5fc878f67c869ce6628cf65121b8d73e1733f941\u0026v=4\" word=\"LoveIt主题作者\" \u003e}} 这里的friend 是引用上个步骤中创建的friend shortcodes ","date":"2021-01-01","objectID":"/hugo-blog/:13:0","tags":["hugo"],"title":"使用hugo来搭建个人博客","uri":"/hugo-blog/"},{"categories":["hugo"],"content":"菜单中添加友链 位置：jinnzh.github.io.source/config.toml [menu] [[menu.main]] identifier= \"friends\" pre= \"\" post= \"\" name= \"友链\" url= \"/friends/\" title= \"\" weight= 4 weight按菜单顺序往下排即可。 最终效果 添加不蒜子，展示网站访问人数 这里的操作都在jinnzy.github.io.source 项目内操作 复制baseof.html 文件 $ mkdir -p ./layouts/_default # 没有目录则创建 $ cp themes/LoveIt/layouts/_default/baseof.html layouts/_default/baseof.html 打开刚复制的layouts/_default/baseof.html ，添加\u003cscript async src=\"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\"\u003e\u003c/script\u003e ，引入不蒜子js文件 {{- partial \"init.html\" . -}} \u003c!DOCTYPE html\u003e \u003chtml lang=\"{{ .Site.LanguageCode }}\"\u003e \u003chead\u003e \u003cscript async src=\"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\"\u003e\u003c/script\u003e \u003cmeta charset=\"utf-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e \u003cmeta name=\"robots\" content=\"noodp\" /\u003e \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"IE=edge, chrome=1\"\u003e \u003ctitle\u003e {{- block \"title\" . }}{{ .Site.Title }}{{ end -}} \u003c/title\u003e {{- partial \"head/meta.html\" . -}} {{- partial \"head/link.html\" . -}} {{- partial \"head/seo.html\" . -}} \u003c/head\u003e ... 打开config.toml ，修改以下配置 [params.footer] enable = true # 自定义内容 (支持 HTML 格式) custom = '\u003cspan id=\"busuanzi_container_site_pv\"\u003e本站总访问量\u003cspan id=\"busuanzi_value_site_pv\"\u003e\u003c/span\u003e次\u003c/span\u003e • \u003cspan id=\"busuanzi_container_site_uv\"\u003e访客数\u003cspan id=\"busuanzi_value_site_uv\"\u003e\u003c/span\u003e人次\u003c/span\u003e' 最终效果： 由于是本地测试，域名都是localhost所以显示这么大的量是正常的，发布后使用真实域名数量就会显示正常 使用valine作为评论系统 登录或注册leancloud，点击左上角创建应用。 创建好之后，进入应用，选择设置 \u003e应用Keys，获取AppID 和App Key 。 打开项目根目录下的config.toml，填入上个步骤获取的AppID 和App Key。 [params.page.comment] enable = true [params.page.comment.valine] enable = true appId = \"xxxxx\" appKey = \"xxxxx\" 运行项目进行测试，设置变量为production 环境，默认是dev 不显示评论等系统。 $ hugo server --environment production 进入文章，看最底部已经有评论出现了。 参考资料 https://lewky.cn/tags/hugo/ https://hugoloveit.com/zh-cn/categories/ kkkgo/hugo-friendlinks友链 loveit自定义样式 不蒜子 https://valine.js.org/quickstart.html ","date":"2021-01-01","objectID":"/hugo-blog/:14:0","tags":["hugo"],"title":"使用hugo来搭建个人博客","uri":"/hugo-blog/"}]